name: Build and Test
on:
  pull_request:
  push:
jobs:

  build-and-test:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow-fail }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        py: [38, 39]
        allow-fail: [false]
        include:

          # Python 3.10 is universally broken
          - os: ubuntu-latest
            py: 310
            allow-fail: true

          - os: macos-10.15
            py: 310
            allow-fail: true

          - os: macos-11
            py: 310
            allow-fail: true

          # MacOS seems broken on nixos-21.11. Maybe need to use nixpkgs-darwin?
          - os: macos-11
            py: 38
            allow-fail: true

          - os: macos-11
            py: 39
            allow-fail: true

          - os: macos-10.15
            py: 38
            allow-fail: true

          - os: macos-10.15
            py: 39
            allow-fail: true

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - uses: Swatinem/rust-cache@v1
      - uses: cachix/cachix-action@v10
        with:
          name: rustpetalo # The name of the Cachix cache
          # If you chose signing key for write access
          #signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_JACG_RUSTPETALO }}'

      - name: Nix build
        run: |
          nix build
          result/bin/mlem -h
          result/bin/foms -h
          result/bin/imageprimaries -h
          result/bin/joinlorhdf -h
          result/bin/make_sensitivity_image -h
          result/bin/makelor -h
          result/bin/vislor -h

      - name: Nix shell
        run: |
          nix shell -c mlem -h
          nix shell -c foms -h
          nix shell -c imageprimaries -h
          nix shell -c joinlorhdf -h
          nix shell -c make_sensitivity_image -h
          nix shell -c makelor -h
          nix shell -c vislor -h

      - name: Test Pure Rust in development environment
        run: nix develop -c just test-rust-pure --color=always

      - name: Test Pure Python in development environment
        run: nix develop -c just test-python-pure --color=yes

      - name: Compile PyO3 in development environment
        run: nix develop -c just python-build-bindings
        if: runner.os == 'Linux'

      - name: Test PyO3 in development environment
        run: nix develop -c just test-python-bindings --color=yes
        if: runner.os == 'Linux'

      - name: Test Julia in development environment
        continue-on-error: true
        run: |
          nix develop -c just test-julia           --color=yes
          if ! [[ "$(which julia)" == */nix/store* ]]; then echo " *** FAILING BECAUSE JULIA IS NOT PROVIDED BY NIX ***"; false; fi
        #run: nix-shell --argstr py ${{ matrix.py }} --run "just test-julia           --color=yes"
        if: runner.os == 'Linux'
